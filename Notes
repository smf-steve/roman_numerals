
# 0-1

45  | 5- before L (50)    VL + ...
95  | 5- before C (100)   VC + ...

450 | 50- before D (500)  LD + ...
950 | 50- before M (1000) LM + ....


# 1-2
 49 | 1 before L (50)     IL
 49 | 1 before C (100)    IC

490 | 10 before D (500)   XD +0, ... +9
490 | 10 before M (1000)  XM +0, ..., +9

# 2-3
495 | 5 before D (500)    VD  +0, +1, +2, +3, +4
995 | 5 before M (1000)   VM  +0, +1, +2, +3, +4


#3-4
499 | 1- before D (500)   ID
599 | 1- before M (1000)  IM





 CD XC IX
 400 + 90 + 9

 LD  VL IV

 -(50 - 500) + -(5 - 50) + -(1 - 5)

 XDIX
 (-10 + 500) + (-1 + 10)

 not
(-10 + 500 + 1) + 10


 VDIV 
(-5 + 500) + (-1 + 5)



 ID
-1 + 500

https://en.wikipedia.org/wiki/Roman_numerals#Apostrophus

https://www.rapidtables.com/math/symbols/roman_numerals.html


Each digit is represented as either subtrative or additive form
	-- both not both

Fraction...

6/12 == S
1/12 == "..."
   {value:       1/12,  unit: ".", half: "S"},  # nila
   Not subtractive form...


array[ 
   {value:       0,  unit:  "N", half: ""},     # nila
   {value:       1,  unit:  "I", half: ""},		# one
   {value:      10,  unit:  "X", half: "V"},	# ten
   {value:     100,  unit:  "C", half: "L"},	# hundred
   {value:    1000,  unit:  "M", half: "D"},	# thousand
----
   {value:   10000,  unit: "BX", half: "BV"},	# 10-thousand
   {value:  100000,  unit: "BC", half: "BL"},	# 100-thousand	one
   {value: 1000000,  unit: "BM", half: "BD"}	# million
]

# Arabic to Roman:  function arabic2roman(number, flags)
## Contraints:
   - number >= 0
   - number <= 1,000,000.
   -- nummber < 4000  (under blah form)

## Forms
	Standard Form (<4000)
	 - but with flags
	   - 4-subtractive form (FALSE) (<5000)
	   - Half form == FALSE (<10,000)

     Apostrophys (<= 100,000 
                    + 4,000) 
    
    Vinculum 
      - use of bar, x 1,000
    Vinculum-extended 
      - use of | bar |, x100,000

      | XIII'| XXXII'
        13 * 100,000 = 1300,000
      + 32 *  1,---      32,000
                       1332,000

## Flags

   - Subtractive Form := 
     - 4-Subtractive Form (default TRUE)
       -  IV -versus- IIII
     - 9-Subtractive Form (default TRUE)
       -  IX -versuse- VIIII 
     - 8-Subtracive Form (default FALSE)
       - VIII -versus-  IIX
   - Half form (default TRUE)
      >- subtractive forms = FALSE




## Algorithm
  - read integer
  - validate limits <-> Forms


  - place = number of digits 
  - # Presume Classic
  - do {
      number = number - array[place].value;
      emit="M"

  - }


## Classic Form
	- place is 1
	Scan number from right to left
	  - unit = array[place].unit;
	  - half = array[place+1].half;
	  - next = array[place+1].unit;
	  - case
	       0:    emit("");
	       1..3: emit(unit{number});
	       4:    emit(unit + half);
	       6..8: emit(half + unit{number-5});
	       9:    emit(unit + next);
	  - place ++


No M alternatives...

apostrophus
  C{n} I C{n}   : 10 ^ (n+2)
   ((( I )))  ==  10^6 == 1000,000

10^1 = 10
10^2 = 100
10^3 = 1000


Vinculum
  bar -- multiply by   1,000
  box -- multiply by 100,000

Standard
  Digit -> opt_sub 


192

CVIIIC

   100 = C
   8   = VIII
   100 = C  
   
   100 + (-8 + 100)

CXCII